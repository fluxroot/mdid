allprojects {
	apply plugin: 'base'
	
	group = 'mdid'
	
	repositories {
		mavenCentral()
	}

	configurations {
		eclipselibs {
			extendsFrom compile
		}
	}

	task libs(type: Sync) {
		from configurations.eclipselibs
		into "$projectDir/lib"
	}

	tasks.withType(Pmd) {
		pmd {
			ignoreFailures = true
		}
	}

	tasks.withType(FindBugs) {
		findbugs {
			ignoreFailures = true
		}
	}

	tasks.withType(Checkstyle) {
		checkstyle {
			ignoreFailures = true
		}
	}
}

configure(rootProject) {
	apply plugin: 'java'
	apply plugin: 'pmd'
	apply plugin: 'findbugs'
	apply plugin: 'checkstyle'
	
	description = 'Message Digest Integrity Database'
	
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	
	dependencies {
		compile 'org.slf4j:slf4j-api:1.7.+'
		compile 'org.slf4j:slf4j-log4j12:1.7.+'
		compile 'log4j:log4j:1.2.+'
		compile 'net.sf.jopt-simple:jopt-simple:4.3'
		
		testCompile 'junit:junit:4.+'
	}
	
	jar {
		from {
			configurations.compile.collect {it.isDirectory() ? it : zipTree(it)}
		}
		from sourceSets.main.allJava
		manifest {
			attributes 'Implementation-Title': project.group, 'Implementation-Version': project.version, 'Main-Class': 'mdid.Mdid'
		}
	}
	
	task dist(type: Zip) {
		def baseDir = "${project.name}-${project.version}"
		
		into ("$baseDir") {
			from 'README.md'
			from 'COPYING'
			from 'COPYING.LESSER'
			from jar
		}
	}

	artifacts {
		archives dist
	}
	
	task wrapper(type: Wrapper) {
		gradleVersion = '1.5'
	}
}

def downloadFile(srcUrl, destUrl) {
	def dest = new BufferedOutputStream(new FileOutputStream(destUrl))
	dest << new URL(srcUrl).openStream()
	dest.close()
}
